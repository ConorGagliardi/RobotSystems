def run(img):
    # make a copy and draw center lines for reference
    img_copy = img.copy()
    img_h, img_w = img.shape[:2]
    cv2.line(img, (0, int(img_h/2)), (img_w, int(img_h/2)), (0,0,200), 1)
    cv2.line(img, (int(img_w/2), 0), (int(img_w/2), img_h), (0,0,200), 1)
    
    # if not running then just return image
    if not __isRunning:
        return img
     
    # resize image and apply blur for noise reduction
    frame_resize = cv2.resize(img_copy, size, interpolation=cv2.INTER_NEAREST)
    frame_gb = cv2.GaussianBlur(frame_resize, (11, 11), 11)
    
    # if ROI already detected and pick-up in progress then use that area
    if get_roi and start_pick_up:
        get_roi = False
        frame_gb = getMaskROI(frame_gb, roi, size)    
    
    # convert to LAB for better color segmentation
    frame_lab = cv2.cvtColor(frame_gb, cv2.COLOR_BGR2LAB)
    
    area_max = 0
    areaMaxContour = 0
    
    # if not in pick-up mode then check for target color
    if not start_pick_up:
        for i in color_range:
            if i in __target_color:
                detect_color = i
                # make bounding box
                frame_mask = cv2.inRange(frame_lab, color_range[detect_color][0], color_range[detect_color][1])
                opened = cv2.morphologyEx(frame_mask, cv2.MORPH_OPEN, np.ones((6,6), np.uint8))
                closed = cv2.morphologyEx(opened, cv2.MORPH_CLOSE, np.ones((6,6), np.uint8))
                contours = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)[-2]
                areaMaxContour, area_max = getAreaMaxContour(contours)
                
        # if a big enough area is found then process it
        if area_max > 2500:
            rect = cv2.minAreaRect(areaMaxContour)
            box = np.int0(cv2.boxPoints(rect))
            roi = getROI(box)
            get_roi = True

            # get center of object and convert to world coords
            img_centerx, img_centery = getCenter(rect, roi, size, square_length)
            world_x, world_y = convertCoordinate(img_centerx, img_centery, size)
            
            # draw contour and coord info for visual check
            cv2.drawContours(img, [box], -1, range_rgb[detect_color], 2)
            cv2.putText(img, '('+str(world_x)+','+str(world_y)+')', (min(box[0,0],box[2,0]), box[2,1]-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, range_rgb[detect_color], 1)
            
            # check if object is stable by comparing to last frame
            distance = math.sqrt(pow(world_x - last_x,2)+pow(world_y - last_y,2))
            last_x, last_y = world_x, world_y
            track = True
            
            # if object is still there pick-up after 1.5 sec
            if action_finish:
                if distance < 0.3:
                    center_list.extend((world_x, world_y))
                    count += 1
                    if start_count_t1:
                        start_count_t1 = False
                        t1 = time.time()
                    if time.time() - t1 > 1.5:
                        rotation_angle = rect[2]
                        start_count_t1 = True
                        world_X, world_Y = np.mean(np.array(center_list).reshape(count,2), axis=0)
                        count = 0
                        center_list = []
                        start_pick_up = True
                else:
                    t1 = time.time()
                    start_count_t1 = True
                    count = 0
                    center_list = []
                    
    # return image with drawn info
    return img
